let userModel,encryptPassword,sendErrorResponse,sendSuccessResponse,passwordStrength;_6c6‍.x([["createUserHandler",()=>createUserHandler],["updateHandler",()=>updateHandler],["getAllUsers",()=>getAllUsers]]);_6c6‍.w("../schemas/User",[["userModel",["userModel"],function(v){userModel=v}]]);_6c6‍.w("../utils/bcrypt",[["encryptPassword",["encryptPassword"],function(v){encryptPassword=v}]]);_6c6‍.w("../utils/response",[["sendErrorResponse",["sendErrorResponse"],function(v){sendErrorResponse=v}],["sendSuccessResponse",["sendSuccessResponse"],function(v){sendSuccessResponse=v}]]);_6c6‍.w("check-password-strength",[["passwordStrength",["passwordStrength"],function(v){passwordStrength=v}]]);




       const createUserHandler = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    if (email === undefined || password === undefined) {
      throw new Error("Arguments Missing");
    }
    const ans = passwordStrength(password).value;
    if (ans === "Weak") throw new Error("Password is Weak");
    const hashPassword = await encryptPassword(password);
    const user = await userModel.create({
      name,
      email,
      password: hashPassword,
    });
    sendSuccessResponse(res, user);
  } catch (error) {
    sendSuccessResponse(res, error.message);
  }
};

       const updateHandler = async (req, res) => {
  
};

       const getAllUsers = async (req, res) => {
  try {
    const users = await userModel.find();
    sendSuccessResponse(res, users);
  } catch (error) {
    sendErrorResponse(res, error.message);
  }
};
